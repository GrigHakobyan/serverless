service: lambda-test-service

variablesResolutionMode: 20210326

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: ${env:AWS_DEFAULT_REGION ,'eu-central-1'}
  profile: softshark_local
  stackName: custom-local-stack-dev-grigor
  stage: ${opt:stage, 'dev'}
  apiGateway:
    restApiId: !Ref ServerlessWebRestApi
    restApiRootResourceId: !GetAtt ServerlessWebRestApi.RootResourceId

  environment:
    TOKEN_SECRET_KEY: ${ssm:/${self:provider.stage}/TOKEN_SECRET_KEY_2}
    USER_TABLE: !Ref UsersTable
    GSI_CARNAME: ${self:custom.dynamoDB.UsersTableGSINames.GSICarname}
    USER_POOL_ID: ${self:custom.dynamoDB.UsersTableGSINames.UserPoolId}


  iamRoleStatements:
    - Effect: Allow
      Resource: '*'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - lambda:InvokeFunction
        - ssm:GetParameter
        - cognito-idp:ListUsers


custom:
  dynamoDB:
    UsersTableGSINames:
      GSICarname: GSI_CARNAME
      UserPoolId: 'eu-central-1_0657elRnn'

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-UsersTable-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: carId
            AttributeType: S
          - AttributeName: carName
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: carId
            KeyType: RANGE
        ProvisionedThroughput:
          WriteCapacityUnits: 1
          ReadCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.dynamoDB.UsersTableGSINames.GSICarname}
            KeySchema:
                - AttributeName: carName
                  KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    ServerlessWebRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-rest-api-${self:provider.stage}

    ServerlessApiGateWayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: ${self:service}-rest-api-authorizer-${self:provider.stage}
        IdentitySource: method.request.header.Authorization
        RestApiId: !Ref ServerlessWebRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt:
              - CognitoUsersPool
              - Arn


    ServerlessApiGateWayUnauthorized:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: UNAUTHORIZED
        RestApiId: !Ref ServerlessWebRestApi

    CognitoUsersPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-Cognito-Users-Pool-${self:provider.stage}
        UsernameAttributes:
          - email
    CognitoUsersPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-Cognito-Users-Pool-Client-${self:provider.stage}
        UserPoolId: !Ref CognitoUsersPool
        ExplicitAuthFlows:
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
        GenerateSecret: false


package:
  exclude:
    - .idea/**
    - lambda/package-lock.json


functions:
  # Get All Users
  get_users:
    handler: lambda/handler.getUsers
    events:
      - http:
          path: users
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ServerlessApiGateWayAuthorizer
          cors:
            origins: '*'
            headers:
              - '*'


  # Get User By Id
  get_user:
    handler: lambda/handler.getUser
    events:
      - http:
          path: user/{id}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ServerlessApiGateWayAuthorizer
          cors:
            origins: '*'
            headers:
              - '*'


  # Get All Cars
  get_cars:
    handler: lambda/handler.getCars
    events:
      - http:
          path: cars
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ServerlessApiGateWayAuthorizer
          cors:
            origins: '*'
            headers:
              - '*'


  # Get Car By Car Id
  get_car:
    handler: lambda/handler.getCar
    events:
      - http:
          path: car/{carId}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ServerlessApiGateWayAuthorizer
          cors:
            origins: '*'
            headers:
              - '*'


  # Get User All Cars
  get_user_cars:
    handler: lambda/handler.getUserCars
    events:
      - http:
          path: cars/user
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ServerlessApiGateWayAuthorizer
          cors:
            origins: '*'
            headers:
              - '*'

  # Create Car
  create_car:
    handler: lambda/handler.createCar
    events:
      - http:
          path: car
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ServerlessApiGateWayAuthorizer
          cors:
            origins: '*'
            headers:
              - '*'



  # Update Car By Id
  update_car:
    handler: lambda/handler.updateCar
    events:
      - http:
          path: car
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ServerlessApiGateWayAuthorizer
          cors:
            origins: '*'
            headers:
              - '*'


  # Remove Car By Id
  remove_car:
    handler: lambda/handler.removeCar
    events:
      - http:
          path: car
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ServerlessApiGateWayAuthorizer
          cors:
            origins: '*'
            headers:
              - '*'

  remove_user_cars:
    handler: lambda/handler.removeUserCars
    events:
      - http:
          path: deleteCars
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ServerlessApiGateWayAuthorizer
          cors:
            origins: '*'
            headers:
              - '*'

service: lambda-test-service

variablesResolutionMode: 20210326

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: ${env:AWS_DEFAULT_REGION ,'eu-central-1'}
  profile: softshark_local
  stackName: custom-local-stack-dev-grigor
  stage: ${opt:stage, 'dev'}
  environment:
    TOKEN_SECRET_KEY: ${ssm:/${self:provider.stage}/TOKEN_SECRET_KEY_2}
    USER_TABLE: !Ref UsersTable
    GSI_USERNAME: ${self:custom.dynamoDB.UsersTableGSINames.GSIUsername}
    GSI_CARNAME: ${self:custom.dynamoDB.UsersTableGSINames.GSICarname}

  iamRoleStatements:
    - Effect: Allow
      Resource: '*'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - lambda:InvokeFunction
        - ssm:GetParameter


custom:
  dynamoDB:
    UsersTableGSINames:
      GSIUsername: GSI_USERNAME
      GSICarname: GSI_CARNAME

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-UsersTable-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: metadata
            AttributeType: S
          - AttributeName: username
            AttributeType: S
          - AttributeName: carName
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: metadata
            KeyType: RANGE
        ProvisionedThroughput:
          WriteCapacityUnits: 1
          ReadCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName:  ${self:custom.dynamoDB.UsersTableGSINames.GSIUsername}
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: ${self:custom.dynamoDB.UsersTableGSINames.GSICarname}
            KeySchema:
                - AttributeName: carName
                  KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1


package:
  exclude:
    - .idea/**
    - lambda/package-lock.json


functions:
  # Authorizer
  authorizer:
    handler: lambda/handler.auth


  check_token:
    handler: lambda/handler.check
    events:
      - http:
          path: check
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors:
            origins: '*'
            headers:
              - '*'



      # User registration
  create_user:
    handler: lambda/handler.registerUser
    events:
      - http:
          path: registration
          method: post
          cors:
            origins: '*'
            headers:
              - '*'



  # User login
  login_user:
    handler: lambda/handler.loginUser
    events:
      - http:
          path: login
          method: post
          cors:
            origins: '*'
            headers:
              - '*'


  # Get All Users
  get_users:
    handler: lambda/handler.getUsers
    events:
      - http:
          path: users
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors:
            origins: '*'
            headers:
              - '*'

  # Get User By Id
  get_user:
    handler: lambda/handler.getUser
    events:
      - http:
          path: user/{id}
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors:
            origins: '*'
            headers:
              - '*'


  # Remove User By Id
  remove_user:
    handler: lambda/handler.removeUser
    events:
      - http:
          path: user
          method: delete
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors:
            origins: '*'
            headers:
              - '*'


  # Update User By Id
  update_user:
    handler: lambda/handler.updateUser
    events:
      - http:
          path: user
          method: put
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors:
            origins: '*'
            headers:
              - '*'

  get_user_profile:
    handler: lambda/handler.userProfile
    events:
      - http:
          path: profile
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors:
            origins: '*'
            headers:
              - '*'

  # Get All Cars
  get_cars:
    handler: lambda/handler.getCars
    events:
      - http:
          path: cars
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors:
            origins: '*'
            headers:
              - '*'


  # Get Car By Car Id
  get_car:
    handler: lambda/handler.getCar
    events:
      - http:
          path: car/{carId}
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors:
            origins: '*'
            headers:
              - '*'


  # Get User All Cars
  get_user_cars:
    handler: lambda/handler.getUserCars
    events:
      - http:
          path: cars/user
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors:
            origins: '*'
            headers:
              - '*'

  # Create Car
  create_car:
    handler: lambda/handler.createCar
    events:
      - http:
          path: car
          method: post
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors:
            origins: '*'
            headers:
              - '*'



  # Update Car By Id
  update_car:
    handler: lambda/handler.updateCar
    events:
      - http:
          path: car
          method: put
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors:
            origins: '*'
            headers:
              - '*'

  # Remove Car By Id
  remove_car:
    handler: lambda/handler.removeCar
    events:
      - http:
          path: car
          method: delete
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors:
            origins: '*'
            headers:
              - '*'
